import subprocess
import ast
import sys

model = "gpt-3.5-turbo"

def printToTerminalFile(*args, **kwargs):
    """
    This function logs all statements to a file ResponseLog.

    """
    original_stdout = sys.stdout
    print(*args, **kwargs)
    try:
        file_name = "ResponseLog_" + model + ".txt"
        f = open(file_name, 'a', encoding="utf-8")
        sys.stdout = f
        print(*args, **kwargs)
        sys.stdout = original_stdout
        f.close()
    finally:
        sys.stdout = original_stdout


def extract_modules_to_import(code):
    """
    This function extracts the modules that needs to be imported to run the given code.

    :param code: response code generated by LLM
    :return: List of modules to be imported
    """
    ast_tree = ast.parse(code)
    modules_to_import = set()

    for node in ast.walk(ast_tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                modules_to_import.add(alias.name)
        elif isinstance(node, ast.ImportFrom):
            modules_to_import.add(node.module)

    return list(modules_to_import)


def install_imports(code, model_new):
    """
    This function installs the import modules from the given code.

    :param code: response code generated by LLM
    :return: string returning the execution status
    """
    print('Installing imports if any new imports present.\n ')

    try:
        if code:
            modules_to_import = extract_modules_to_import(code)
            if modules_to_import:
                globals()['model'] = model_new
                # fetch already installed modules
                result = subprocess.run(['pip', 'freeze'], stdout=subprocess.PIPE, text=True)
                installed_modules = set(line.split('==')[0] for line in result.stdout.splitlines())
                installed_modules.add("sys")
                # Install required modules using pip
                modules_to_install = [module for module in modules_to_import if module not in installed_modules]

                printToTerminalFile("Installing new imports: ", modules_to_install)
                # to check pip version errors
                subprocess.check_call(["python", "-m", "pip", "install", "--upgrade", "pip"])
                subprocess.run(['pip', 'install'] + modules_to_install)
        else:
            return "The provided response has no code. It is empty please return a Python code as part of the response message."
    except Exception as e:
        printToTerminalFile(str(e))
        return repr(e)
    
    return "Installed new imports successfully!"
